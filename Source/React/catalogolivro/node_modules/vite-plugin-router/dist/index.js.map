{"version":3,"sources":["../src/index.ts","../src/constants.ts","../src/generateRoutes.ts","../src/utils/findLayout.ts","../src/utils/getFilesWithExtensions.ts","../src/utils/index.ts","../src/utils/processFiles.ts","../src/template/utils.ts","../src/template/index.ts","../src/utils/log/index.ts"],"sourcesContent":["import path from 'path';\nimport chokidar from 'chokidar';\nimport lodash from 'lodash';\n\nimport { CURRENT_DIR, DEFAULT_DIR, DEFAULT_OUT_DIR } from './constants'\nimport { generateRoutes } from './generateRoutes'\nimport { Log } from './utils/log'\nimport type { IViteRouterPlugin, IViteRouterPros } from './types';\n\nexport default function viteRouter({\n  dir = DEFAULT_DIR,\n  outDir = DEFAULT_OUT_DIR\n}: IViteRouterPros = {}): IViteRouterPlugin {\n  const dirPath = path.resolve(CURRENT_DIR, dir);\n  const chokidarWatcher = chokidar.watch(dirPath);\n\n  const debounceGenerateRoutes = lodash.debounce(generateRoutes, 100);\n\n  return {\n    name: 'vite-plugin-router',\n\n    configureServer() {\n      chokidarWatcher.on('add', () => {\n        debounceGenerateRoutes({ dir: dirPath, outDir });\n      });\n\n      chokidarWatcher.on('unlink', () => {\n        debounceGenerateRoutes({ dir: dirPath, outDir });\n      });\n\n      chokidarWatcher.on('ready', () => {\n        Log.info('Vite router is ready');\n        Log.info(`Observing in: ${dirPath}`);\n      });\n    },\n    closeBundle() {\n      chokidarWatcher.close();\n    }\n  };\n}\n","export const extensions = ['.tsx', '.ts', '.jsx', '.js'];\nexport const DEFAULT_DIR = 'src/app';\nexport const DEFAULT_OUT_DIR = 'src';\nexport const CURRENT_DIR = process.cwd();\nexport const ROOT_DIR = '/'\n","import path from \"path\";\nimport fs from \"fs\";\n\nimport type { IViteRouterPros } from \"./types\";\nimport { findLayout } from \"./utils/findLayout\";\nimport { getFilesWithExtensions } from \"./utils/getFilesWithExtensions\";\nimport { processFiles } from \"./utils/processFiles\";\nimport { template } from \"./template\";\nimport { Log } from \"./utils/log\";\nimport { CURRENT_DIR } from \"./constants\";\n\nexport function generateRoutes({ dir = '', outDir = '' }: IViteRouterPros) {\n  const getFiles = getFilesWithExtensions(dir);\n\n  const { files, layouts } = processFiles(getFiles);\n\n  const routes = findLayout(files, layouts);\n\n  const generateTemplate = template(routes, layouts);\n\n  const fileName = 'routes.tsx';\n  const filePath = path.join(CURRENT_DIR, outDir, fileName);\n\n  fs.writeFileSync(filePath, generateTemplate, 'utf-8');\n  Log.info(`Generated successfully`);\n}","import { ROOT_DIR } from '../constants';\nimport { ProcessedRoute, File, IRoute } from '../types';\n\nfunction findLayoutForFile(files: ProcessedRoute, layouts: File[]) {\n  const pathSegments = files.path.split(ROOT_DIR).filter((segment) => segment !== '');\n\n  for (let i = pathSegments.length; i >= 0; i--) {\n    const currentPath = `${ROOT_DIR}${pathSegments.slice(0, i).join(ROOT_DIR)}`;\n    const matchingLayout = layouts.find((layout) => layout.path === currentPath);\n\n    if (matchingLayout) {\n      return matchingLayout.path;\n    }\n  }\n\n  return null;\n}\n\nexport function findLayout(files: ProcessedRoute[], layouts: File[]): IRoute[] {\n  return files.map((file) => {\n    const layout = findLayoutForFile(file, layouts);\n\n    return {\n      ...file,\n      layout\n    };\n  });\n}\n","import fs from 'fs';\nimport path from 'path';\n\nimport { extensions, ROOT_DIR } from '../constants';\nimport { File } from '../types';\n\nexport function getFilesWithExtensions(dir: string) {\n  const files: File[] = [];\n\n  function traverseDirectory(dir: string, currentPath = '') {\n    const items = fs.readdirSync(dir);\n\n    items.forEach((item) => {\n      const itemPath = path.join(dir, item);\n      const isDirectory = fs.statSync(itemPath).isDirectory();\n\n      if (isDirectory) {\n        const newPath = path.join(currentPath, item).replace(/\\\\/g, ROOT_DIR);\n\n        traverseDirectory(itemPath, newPath);\n        return;\n      }\n\n      const fileExtension = path.extname(item);\n\n      if (extensions.includes(fileExtension)) {\n        const filePath = currentPath === '' ? ROOT_DIR : `${ROOT_DIR}${currentPath}`;\n\n        files.push({ path: filePath, name: item });\n      }\n    });\n\n    return files;\n  }\n\n  traverseDirectory(dir);\n\n  return files;\n}\n","import { ROOT_DIR } from \"../constants\";\n\nexport function formatPath(path: string): string {\n  return path.replace(/\\[(.+?)\\]/g, ':$1');\n}\n\nexport function formatFileName(fileName: string): string {\n  fileName = fileName.replace(/\\.(tsx?|jsx?|ts|js)$/i, '');\n\n  if (fileName.toLowerCase() === 'index') {\n    return '';\n  }\n\n  if (fileName.match(/^\\[(.+?)\\]$/)) {\n    fileName = `:${fileName.slice(1, -1)}`;\n  }\n\n  return `${ROOT_DIR}${fileName}`;\n}\n\n","import { formatFileName, formatPath } from './';\nimport { File, ProcessedRoute, IProcessFiles } from '../types';\nimport { ROOT_DIR } from '../constants';\n\nexport function processFiles(files: File[]): IProcessFiles {\n  const processedFiles: ProcessedRoute[] = [];\n  const layoutFiles: File[] = [];\n\n  files.forEach(({ name, path }) => {\n    if (name.includes('style') || name.includes('css')) return;\n\n    if (name.includes('layout')) {\n      layoutFiles.push({ name, path });\n      return;\n    }\n\n    // TODO: verificar se o nome do arquivo e do diretório seguem o padrão\n    const processedPath = formatPath(path);\n    const fileName = formatFileName(name);\n\n    if (processedPath === ROOT_DIR) {\n      processedFiles.push({\n        path,\n        name,\n        route: fileName\n      });\n\n      return;\n    }\n\n    processedFiles.push({\n      path,\n      name,\n      route: `${processedPath}${fileName}`\n    });\n  });\n\n  return {\n    files: processedFiles,\n    layouts: layoutFiles\n  };\n}\n","import { IRoute, File } from \"../types\";\n\nexport function getCustomLayoutName(path: string | null) {\n  if (!path) return null;\n  // Remover barras '/'\n  let name = path.replace(/\\//g, '');\n\n  // Remover colchetes []\n  name = name.replace(/\\[(.*?)\\]/g, (match) => {\n    const paramName = match.substring(1, match.length - 1);\n    return paramName.charAt(0).toUpperCase() + paramName.slice(1);\n  });\n\n  // Capitalizar o nome\n  name = name.charAt(0).toUpperCase() + name.slice(1);\n\n  // Remover caracteres especiais\n  name = name.replace(/[^\\w\\s]/gi, '');\n\n  // Remover acentos\n  name = name.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n\n  // Verificar se o nome está vazio\n  if (name === '') {\n    // Definir \"Root\" como padrão se o path for '/'\n    name = 'Root';\n  }\n\n  return `${name}Layout`;\n}\n\nexport function formatPathFromFilename(filename: string) {\n  const extensionRemoved = filename.replace(/\\.(tsx?|jsx?|ts|js)$/i, '');\n\n  if (extensionRemoved === 'index') {\n    return '';\n  } else {\n    return `/${extensionRemoved}`;\n  }\n}\n\nexport function getImporPath(path: string, file: string) {\n  if (path === '/' && file.includes('index')) {\n    return './app/index';\n  }\n\n  return `./app${path !== '/' ? path : ''}${formatPathFromFilename(file)}`;\n}\n\nexport function generateImports(routes: IRoute[]) {\n  return routes\n    .map(({ path, name }, index) => {\n      const fileName = `File${index + 1}`;\n      const filePath = getImporPath(path, name);\n\n      return `const ${fileName} = lazy(() => import('${filePath}'));`;\n    })\n    .join('\\n');\n}\n\nexport function generateLayoutImports(layouts: File[]) {\n  return layouts\n    .map(({ path, name }) => {\n      const fileName = getCustomLayoutName(path);\n\n      const filePath = `./app${path !== '/' ? path : ''}${formatPathFromFilename(name)}`;\n\n      return `const ${fileName} = lazy(() => import('${filePath}'));`;\n    })\n    .join('\\n');\n}\n\nexport function generateRoutes(routes: IRoute[]) {\n  return routes\n    .map(({ route, layout }, index) => {\n      const fileName = `File${index + 1}`;\n      const layoutName = getCustomLayoutName(layout);\n\n      const processedLayout =\n        layoutName === null\n          ? `<${fileName} />`\n          : `\n              <${layoutName}>\n                <${fileName} />\n              </${layoutName}>\n            `;\n\n      return `\n          <Route \n            element={${processedLayout}} \n            path=\"${route === '' ? '/' : route}\" \n            key=\"${route === '' ? '/' : route}\"  \n          />`;\n    })\n    .join('\\n        ');\n}\n","import { IRoute, File } from '../types'\nimport { generateImports, generateLayoutImports, generateRoutes } from './utils'\n\nexport function template(routes: IRoute[], layouts: File[]) {\n  return `// Created by Vite Router https://www.npmjs.com/package/vite-plugin-router\n  // @ts-nocheck\n  // prettier-ignore\nimport React, { lazy, Suspense } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n\n${generateImports(routes)}\n\n${generateLayoutImports(layouts)}\n\nfunction Error404() {\n  return <div>404</div>;\n}\n\nfunction Loading() {\n  return <div>Loading...</div>;\n}\n\ninterface IAppRoutesProps {\n  custom404?: React.ReactNode;\n  customLoading?: React.ReactNode;\n}\n\nexport function AppRoutes({ custom404: Custom404, customLoading: CustomLoading }: IAppRoutesProps) {\n  return (\n    <BrowserRouter>\n      <Suspense fallback={CustomLoading || <Loading />}>\n        <Routes>\n          ${generateRoutes(routes)}\n          <Route\n            path=\"*\"\n            element={Custom404 || <Error404 />}\n          />\n        </Routes>\n      </Suspense> \n    </BrowserRouter>\n  );\n}\n`;\n}\n","import pino from 'pino';\n\nexport const Log = pino({\n  level: 'info',\n\n  transport: {\n    target: 'pino-pretty',\n    options: {\n      colorize: true,\n      translateTime: 'SYS:HH:MM:ss.l',\n      levelFirst: true,\n      ignore: 'pid,hostname,time'\n    }\n  }\n}).child({ name: 'VITE ROUTER' });\n"],"mappings":"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","names":["import_path","import_path","import_fs","dir","fs","path","path","path","path","pino","generateRoutes","path","fs","path","chokidar","lodash","generateRoutes"]}